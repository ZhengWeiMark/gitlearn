查看历史记录
git log					#详细版本线
git log --pretty=oneline   #单行
git reflog  #所有提交和回退

初始化库
git init

add文件到暂存
git add  license.txt
git add  .


staged文件又被修改了，commit后没有diff,
说明work内容与stage相同

工作区有diff,add 后就没有diff了


提交一个文件
 git commit -m 'one file'  license.txt
 
 提交暂存区入库
git commit -m 'memo'

工作区版本比较
git diff  #全部文件
git diff -- <file> #单个文件
git diff HEAD^  #指定版本

清除工作区
git checkout -- <file>  #用暂存区或库替代
git restore <file>

清除暂存区
git reset HEAD <file>
git restore --staged <file>

用指定库版本覆盖工作区、暂存区
git reset --hard HEAD
git reset --hard HEAD^


写入暂存区     
git add <file



直接提交修改入库
git commit -a -m '备注'

回退并更新工作区
git reset --hard HEAD^    #上个版本
git reset --hard 版本号   # 特定版本

删文件
git del <file>
git commit -m

本地库绑定远端库
先创建远程空仓库,然后git remote add origin git@github.com:ZhengWeiMark/gitlearn.git
然后第一次推送
git push -u origin master
推送
git push #推送当前分支


从远程复制新库
已有远程库，然后git clone git@github.com:ZhengWeiMark/gitskills2.git

创建分支
git switch -c feature1
git checkout -b dev
等同于
git branch  dev
git checkout  dev

查看分支
git branch

切换回分支
git checkout master
git switch master

合并dev分支到当前分支
git merge dev

删除分支
git branch -d dev

解决冲突
在一个分支commit,和另一个分支commit后，结果有冲突
打开文件修改，然后add , commit

git diff  #工作区和暂存区比较
git diff --staged #暂存区和本地库比较
git diff HEAD  #工作区和Head比较
每个分支都有自己的工作区和暂存区


图形化显示版本合并路径
git log --graph --pretty=oneline --abbrev-commit

vim 
退出 ：q


开发版本在dev,未完成时来了bug，储藏现场
git stash #隐藏dev现场，包括工作区和暂存区
git checkout master #在master上修复
git checkout -b issue #新建修复分支
提交、合并、删除issue

git merge --no-ff -m 'fix bug101' issue101 #保留中间版本


git stash list #查看现场
git stash pop #恢复现场，未add状态


在dev分支工作，有新功能的增加，建新分支，
git branch -D 删除未合并分支

远程协作，
git  remote -v  #看远程库详情
git push origin dev #指定分支上传远程库
git clone git@zhengwei #克隆远程库的master分支到目录下

git checkout -b devvv origin/dev  #克隆远程dev分支


